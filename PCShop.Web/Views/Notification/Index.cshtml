@using PCShop.Web.ViewModels.Notification
@model NotificationListViewModel

@{
    ViewData["Title"] = "My Notifications";
    bool hasUnread = Model.Notifications.Any(n => !n.IsRead);
}

<h2 class="mt-4">Notifications</h2>
<hr />

@if (!Model.Notifications.Any())
{
    <div class="alert alert-info">You have no notifications.</div>
}
else
{
    <form asp-controller="Notification" asp-action="BulkAction" method="post" id="bulkForm">
        <div class="mb-2 d-flex gap-2 align-items-center">
            <input type="checkbox" id="selectAll" class="form-check-input" />
            <label for="selectAll" class="form-check-label me-3">Select All</label>

            <button type="submit" name="action" value="markAsRead" class="btn btn-sm btn-success"
                    @(hasUnread ? "" : "disabled")>
                Mark Selected as Read
            </button>

            <button type="submit" name="action" value="delete" class="btn btn-sm btn-danger"
                    @(Model.Notifications.Any() ? "" : "disabled")
                    onclick="return confirm('Are you sure you want to delete the selected notifications?');">
                Delete Selected
            </button>
        </div>

        <ul class="list-group">
            @foreach (var notification in Model.Notifications)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center @(notification.IsRead ? "" : "list-group-item-warning")">
                    <div class="form-check me-2">
                        <input class="form-check-input" type="checkbox" name="selectedIds" value="@notification.Id" />
                    </div>

                    <div class="flex-grow-1">
                        <strong>@notification.Message</strong><br />
                        <small class="text-muted">@notification.CreatedOn</small>
                    </div>
                </li>
            }
        </ul>
    </form>

    <!-- Pagination -->
    @if (Model.TotalNotifications > Model.NotificationsPerPage)
    {
        int totalPages = (int)Math.Ceiling((double)Model.TotalNotifications / Model.NotificationsPerPage);
        int currentPage = Model.CurrentPage;

        <nav aria-label="Notification pagination" class="mt-4">
            <ul class="pagination justify-content-center">

                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link"
                       asp-controller="Notification"
                       asp-action="Index"
                       asp-route-currentPage="@(currentPage - 1)">
                        &laquo;
                    </a>
                </li>

                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link"
                           asp-controller="Notification"
                           asp-action="Index"
                           asp-route-currentPage="@i">@i</a>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link"
                       asp-controller="Notification"
                       asp-action="Index"
                       asp-route-currentPage="@(currentPage + 1)">
                        &raquo;
                    </a>
                </li>

            </ul>
        </nav>
    }
}

@section Scripts {
    <script>
        document.getElementById("selectAll").addEventListener("change", function () {
            const checkboxes = document.querySelectorAll("input[name='selectedIds']");
            for (const cb of checkboxes) {
                cb.checked = this.checked;
            }
        });
    </script>
}
