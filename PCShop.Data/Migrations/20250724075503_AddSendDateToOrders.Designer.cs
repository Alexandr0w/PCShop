// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCShop.Data;

#nullable disable

namespace PCShop.Data.Migrations
{
    [DbContext(typeof(PCShopDbContext))]
    [Migration("20250724075503_AddSendDateToOrders")]
    partial class AddSendDateToOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PCShop.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Full address of the user");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City where the user resides");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Full name of the user");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the user is deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("State or region where the user resides");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Represents a user in the PC Shop system");
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.Computer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the computer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the computer was created");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the computer was deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the computer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image URL for the computer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the computer is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the computer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the computer in decimal format");

                    b.HasKey("Id");

                    b.ToTable("Computers", t =>
                        {
                            t.HasComment("Represents a computer in the PC Shop system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f11111-aaaa-bbbb-cccc-111111111111"),
                            CreatedOn = new DateTime(2025, 7, 23, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5007),
                            Description = "CPU: AMD Ryzen 5 5600 // GPU: MSI GeForce RTX 3060 VENTUS 2X 12G // RAM: 32GB (2x 16GB) DDR4 3600 MT/s // Storage: 1TB Kingston NV3 // Motherboard: ASRock B550M Pro4 // Case: DeepCool CH360 DIGITAL // Cooling: DeepCool AG400 Black ARGB // Power Supply: DeepCool PK650D 650W Bronze",
                            ImageUrl = "/images/computers/grigs_polaris_max_amd.png",
                            IsDeleted = false,
                            Name = "G:RIGS POLARIS Max (AMD)",
                            Price = 1022.11m
                        },
                        new
                        {
                            Id = new Guid("f2f22222-aaaa-bbbb-cccc-222222222222"),
                            CreatedOn = new DateTime(2025, 7, 22, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5017),
                            Description = "CPU: Intel Core i5-13400F // GPU: MSI GeForce RTX 3060 VENTUS 2X 12G // RAM: 32GB (2x 16GB) DDR4 3600 MT/s // Storage: 1TB Kingston NV3 // Motherboard: ASUS TUF GAMING B760M-PLUS D4 // Case: DeepCool CH360 DIGITAL WH // Cooling: DeepCool AG400 White ARGB // Power Supply: DeepCool PK650D 650W Bronze",
                            ImageUrl = "/images/computers/grigs_polaris_max_intel.png",
                            IsDeleted = false,
                            Name = "G:RIGS POLARIS Max (Intel)",
                            Price = 1109.04m
                        },
                        new
                        {
                            Id = new Guid("f3f33333-aaaa-bbbb-cccc-333333333333"),
                            CreatedOn = new DateTime(2025, 7, 21, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5031),
                            Description = "CPU: AMD Ryzen 7 5700X3D // GPU: MSI GeForce RTX 4060 VENTUS 2X BLACK // RAM: 32GB (2x16GB) DDR4 3200 MT/s // Storage: 2TB Kingston NV3 // Motherboard: MSI B550-A PRO // Case: COUGAR Duoface RGB // Cooling: DeepCool AG400 Black ARGB // Power Supply: DeepCool PK750D 750W Bronze",
                            ImageUrl = "/images/computers/grigs_spark_ultra_amd_x3d.png",
                            IsDeleted = false,
                            Name = "G:RIGS SPARK Ultra (AMD X3D)",
                            Price = 1241.98m
                        },
                        new
                        {
                            Id = new Guid("f4f44444-aaaa-bbbb-cccc-444444444444"),
                            CreatedOn = new DateTime(2025, 7, 20, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5035),
                            Description = "CPU: Intel Core i5-14600KF // GPU: MSI GeForce RTX 5070 12G SHADOW 2X // RAM: 32GB (2x16GB) DDR5 6000 MT/s // Storage: 2TB Kingston NV3 // Motherboard: MSI B760 GAMING PLUS WIFI // Case: 1stPlayer MEGAVIEW MV8 Black // Cooling: DeepCool AG620 BK ARGB // Power Supply: DeepCool PN750M ATX 3.1",
                            ImageUrl = "/images/computers/grigs_nova_ultra_intel.png",
                            IsDeleted = false,
                            Name = "G:RIGS NOVA Ultra (Intel)",
                            Price = 1876.01m
                        },
                        new
                        {
                            Id = new Guid("f5f55555-aaaa-bbbb-cccc-555555555555"),
                            CreatedOn = new DateTime(2025, 7, 19, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5038),
                            Description = "CPU: AMD Ryzen 7 7700 // GPU: MSI GeForce RTX 5070 12G SHADOW 2X // RAM: 32GB (2x16GB) DDR5 6000 MT/s // Storage: 2TB Kingston NV3 // Motherboard: MSI B850 GAMING PLUS WIFI // Case: DeepCool CH560 DIGITAL Black // Cooling: DeepCool AG620 BK ARGB // Power Supply: DeepCool PN750M ATX 3.1",
                            ImageUrl = "/images/computers/grigs_sirius_ultra_amd_zen4_wh.png",
                            IsDeleted = false,
                            Name = "G:RIGS SIRIUS Ultra (AMD Zen4)",
                            Price = 2039.63m
                        },
                        new
                        {
                            Id = new Guid("f6f66666-aaaa-bbbb-cccc-666666666666"),
                            CreatedOn = new DateTime(2025, 7, 18, 7, 55, 3, 199, DateTimeKind.Utc).AddTicks(5043),
                            Description = "CPU: Intel Core i5-14600KF // GPU: MSI GeForce RTX 5070 12G SHADOW 2X // RAM: 32GB (2x16GB) DDR5 6000 MT/s // Storage: 2TB Kingston NV3 // Motherboard: MSI B760 GAMING PLUS WIFI // Case: DeepCool CH560 DIGITAL Black // Cooling: DeepCool AG620 BK ARGB // Power Supply: DeepCool PN750M ATX 3.1",
                            ImageUrl = "/images/computers/grigs_sirius_ultra_intel.png",
                            IsDeleted = false,
                            Name = "G:RIGS SIRIUS Ultra (Intel)",
                            Price = 1870.89m
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.ComputerPart", b =>
                {
                    b.Property<Guid>("ComputerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Computer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Product");

                    b.HasKey("ComputerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComputersParts", t =>
                        {
                            t.HasComment("Represents a part of a computer, linking it to a specific product");
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the order");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced AspNetUser");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Additional customer comment for the order");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Final delivery address composed of city, postal code, and address");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total delivery fee based on delivery method");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int")
                        .HasComment("Delivery method for the order");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date and time when the order was placed");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasComment("Payment method used for the order");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the order was sent to the user");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The current status of the order");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The total price of the order, including all items and taxes");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Represents an order placed by a user in the system");
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the ordered item");

                    b.Property<Guid?>("ComputerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Computer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Order");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Product");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Number of units ordered");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersItems", t =>
                        {
                            t.HasComment("Represents an item in an order, linking a product to an order");
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the product");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the product was created");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the product was deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Image URL for the product");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the product is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product in decimal format");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced ProductType");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Represents a product in the PC Shop system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("10101010-aaaa-bbbb-cccc-101010101010"),
                            CreatedOn = new DateTime(2025, 7, 23, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1909),
                            Description = "13th Gen 16-core processor with high performance for gaming and productivity.",
                            ImageUrl = "/images/products/intel-i7-13700k.jpg",
                            IsDeleted = false,
                            Name = "Intel Core i7-13700K",
                            Price = 255.66m,
                            ProductTypeId = new Guid("11111111-aaaa-bbbb-cccc-111111111111")
                        },
                        new
                        {
                            Id = new Guid("20202020-aaaa-bbbb-cccc-202020202020"),
                            CreatedOn = new DateTime(2025, 7, 22, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1921),
                            Description = "Latest generation graphics card with ray tracing and DLSS support.",
                            ImageUrl = "/images/products/rtx-4070.png",
                            IsDeleted = false,
                            Name = "NVIDIA GeForce RTX 4070",
                            Price = 766.00m,
                            ProductTypeId = new Guid("22222222-aaaa-bbbb-cccc-222222222222")
                        },
                        new
                        {
                            Id = new Guid("30303030-aaaa-bbbb-cccc-303030303030"),
                            CreatedOn = new DateTime(2025, 7, 21, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1924),
                            Description = "High-performance DDR4 memory kit with RGB lighting.",
                            ImageUrl = "/images/products/corsair-vengeance-32gb.png",
                            IsDeleted = false,
                            Name = "Corsair Vengeance RGB Pro 32GB DDR4",
                            Price = 178.45m,
                            ProductTypeId = new Guid("44444444-aaaa-bbbb-cccc-444444444444")
                        },
                        new
                        {
                            Id = new Guid("40404040-aaaa-bbbb-cccc-404040404040"),
                            CreatedOn = new DateTime(2025, 7, 20, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1927),
                            Description = "Ultra-fast PCIe 4.0 SSD ideal for gaming and heavy applications.",
                            ImageUrl = "/images/products/samsung-980-pro.png",
                            IsDeleted = false,
                            Name = "Samsung 980 PRO 1TB NVMe SSD",
                            Price = 101.75m,
                            ProductTypeId = new Guid("55555555-aaaa-bbbb-cccc-555555555555")
                        },
                        new
                        {
                            Id = new Guid("50505050-aaaa-bbbb-cccc-505050505050"),
                            CreatedOn = new DateTime(2025, 7, 19, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1935),
                            Description = "Premium Z790 chipset motherboard supporting 13th Gen Intel CPUs.",
                            ImageUrl = "/images/products/asus-z790.png",
                            IsDeleted = false,
                            Name = "ASUS ROG STRIX Z790-E",
                            Price = 204.53m,
                            ProductTypeId = new Guid("33333333-aaaa-bbbb-cccc-333333333333")
                        },
                        new
                        {
                            Id = new Guid("60606060-aaaa-bbbb-cccc-606060606060"),
                            CreatedOn = new DateTime(2025, 7, 18, 7, 55, 3, 201, DateTimeKind.Utc).AddTicks(1939),
                            Description = "Reliable and efficient 750W power supply unit with modular cables.",
                            ImageUrl = "/images/products/cooler-master-750w.png",
                            IsDeleted = false,
                            Name = "Cooler Master 750W 80+ Gold PSU",
                            Price = 108.84m,
                            ProductTypeId = new Guid("77777777-aaaa-bbbb-cccc-777777777777")
                        });
                });

            modelBuilder.Entity("PCShop.Data.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the product type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the product type");

                    b.HasKey("Id");

                    b.ToTable("ProductsTypes", t =>
                        {
                            t.HasComment("Product type of the PC Shop system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            Name = "Processor"
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            Name = "Video Card"
                        },
                        new
                        {
                            Id = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            Name = "Motherboard"
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            Name = "RAM"
                        },
                        new
                        {
                            Id = new Guid("55555555-aaaa-bbbb-cccc-555555555555"),
                            Name = "SSD"
                        },
                        new
                        {
                            Id = new Guid("66666666-aaaa-bbbb-cccc-666666666666"),
                            Name = "HDD"
                        },
                        new
                        {
                            Id = new Guid("77777777-aaaa-bbbb-cccc-777777777777"),
                            Name = "Power Supply"
                        },
                        new
                        {
                            Id = new Guid("88888888-aaaa-bbbb-cccc-888888888888"),
                            Name = "Cooling System"
                        },
                        new
                        {
                            Id = new Guid("99999999-aaaa-bbbb-cccc-999999999999"),
                            Name = "Case Fan"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Case"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa2-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa3-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa4-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa5-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Headset"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa6-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Mousepad"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa7-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Speakers"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa8-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Microphone"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa9-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            Name = "Webcam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PCShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PCShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PCShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCShop.Data.Models.ComputerPart", b =>
                {
                    b.HasOne("PCShop.Data.Models.Computer", "Computer")
                        .WithMany("ComputersParts")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCShop.Data.Models.Product", "Product")
                        .WithMany("ComputersParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Computer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCShop.Data.Models.Order", b =>
                {
                    b.HasOne("PCShop.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("PCShop.Data.Models.OrderItem", b =>
                {
                    b.HasOne("PCShop.Data.Models.Computer", "Computer")
                        .WithMany("OrdersItems")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCShop.Data.Models.Order", "Order")
                        .WithMany("OrdersItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCShop.Data.Models.Product", "Product")
                        .WithMany("OrdersItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Computer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCShop.Data.Models.Product", b =>
                {
                    b.HasOne("PCShop.Data.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("PCShop.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PCShop.Data.Models.Computer", b =>
                {
                    b.Navigation("ComputersParts");

                    b.Navigation("OrdersItems");
                });

            modelBuilder.Entity("PCShop.Data.Models.Order", b =>
                {
                    b.Navigation("OrdersItems");
                });

            modelBuilder.Entity("PCShop.Data.Models.Product", b =>
                {
                    b.Navigation("ComputersParts");

                    b.Navigation("OrdersItems");
                });

            modelBuilder.Entity("PCShop.Data.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
